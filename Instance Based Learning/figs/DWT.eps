%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 650.000000 233.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.4 (Build 17E199) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 650 233
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 650 233
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /L put
dup 34 /bracketleft put
dup 35 /n put
dup 36 /bracketright put
dup 37 /H put
dup 38 /two put
dup 39 /X put
dup 40 /A put
dup 41 /p put
dup 42 /r put
dup 43 /o put
dup 44 /x put
dup 45 /i put
dup 46 /m put
dup 47 /a put
dup 48 /t put
dup 49 /space put
dup 50 /C put
dup 51 /e put
dup 52 /uniFB03 put
dup 53 /c put
dup 54 /s put
dup 55 /D put
dup 56 /l put
dup 57 /v put
dup 58 /one put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<




1E111F2A19FEAD01423C48121F2A18FEAD017B283924112E2A3028584C00000000010040000001EC021100170045BA0003000000032BB8000310BA000E000B00032BB8000E10B8000310B80015D0B800152FBA00160000000311123900B800012FB8000C2FBA0013000800032BB8001310303113113311343E0233321615113311342E022322072335405513263927313855112A44337335020205FDFB0124233B2C183830FEA201542A45321C5E520000020024FFF5021A02110013002700CBB800282FB800292FB8002810B80014D0B800142FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8002910B8001EDCB8000ADC410500DA000A00EA000A00025D411B0009000A0019000A0029000A0039000A0049000A0059000A0069000A0079000A0089000A0099000A00A9000A00B9000A00C9000A000D5D00BA000F001900032BB8000F10BA0023000500032BB8002310303113343E0233321E0215140E0223222E0227141E0233323E0235342E0223220E027E192C3B21213B2C19192C3B21213B2C195A20405E3D3E5D402020405D3E3D5E402001022F49321A1A32492F2F49311A1A31492F39624929294962393963492A2A4963000000020043FF3B022D02110018002C00ADB8002E2FBA0018000000032BB8001810B80002D0B8001810B80004D0B800042FB8002E10B8000EDCB8001810B80016D0B800162FB8000E10B80019DC410500DA001900EA001900025D411B0009001900190019002900190039001900490019005900190069001900790019008900190099001900A9001900B9001900C90019000D5DB8001810B80023D0B800232F00B800012FBA0013002800032BB8001310BA001E000900032BB8001E10303113113311331E0333323E0235342E0223220607233505140E0223222E0235343E0233321E024355020E292E2F133B593B1D1E3B593C365A1502013B10243B2C2C3E271211263C2B293D27130205FD36010A171F12082A49623737624B2C272B46FE2648382221364726244637222036450000000001003D0000014D0213000E0027BA0003000100032BB8000310B8000DD0B8000D2F00B800012FBA0009000800032BB8000910303113113335343E02333526060723353D55142C4833455A1F020205FDFBE6324D361C5A023C3F6D000001001FFFF501D60211003A00ABBA0000000100032BBA0020001F00032BB8002010BA0031001F0020111239B800312F410500DA003100EA003100025D411B0009003100190031002900310039003100490031005900310069003100790031008900310099003100A9003100B9003100C90031000D5DB8000BDCB8000010B8002ADCB800


00>] def
/CharStrings 28 dict dup begin
/.notdef 0 def
/space 1 def
/one 2 def
/two 3 def
/A 4 def
/C 5 def
/D 6 def
/H 7 def
/L 8 def
/X 9 def
/bracketleft 10 def
/bracketright 11 def
/a 12 def
/c 13 def
/e 14 def
/i 15 def
/l 16 def
/m 17 def
/n 18 def
/o 19 def
/p 20 def
/r 21 def
/s 22 def
/t 23 def
/v 24 def
/x 25 def
/uniFB03 26 def
/uni2B91 27 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C926AE0E2EF20EAFDBFC5FC1E83BEF5713FF899F5A98AA12E11EE8D7354F595CC6D37173434FCBC249E6FDA96A366A295C828D390FABFE64C7E9F699B5405A2C872384A63279AB008EB4A93D53383E434DD1AABA94DA73A38370A3E40A5A01425793A14D16791BBA27D891B50AD6603B4041CBA952DFC11E668CFF9CCD89C38F056D0203E163EC04550A4E293C6D17CC72F261AE205D0CA283B375D0E10F8BBD2AE3EA387D4D03C08C55552F2A3E4C534FFC7FCCEB977ED5DE7937E97A20CF81E0111936A6E88085020B924F7328A82C12E8A22224074E10D2910919107CFF815654354281CE837FF30C4CE44ECC55959B2E1E19B4B9B2A492F528FF9506DF6A7D206BC66883952824FE1C5F3BB597B6F48F2625547AC54D801EDF1FD115FD5D8F2A968B4F0A0527F326BD47CFA6E14E1D95E995B14B1E009D4C5A51C907624C39CD31F880E82EF6C87A85B29F5DD54B7AAD0676779284E0F0295221D8864D58EAC59F672442C32E547A6822902DB630C410F4582583396E962ADC59E61B104A6C7EB75E71B3E177AE46AB2AF0C51A1BA231AB90279011B465BBBAA79BD700DCA27B71DE61ED019381D367D32EEAB47888A3006C1DDB9E027A453C6B822309082FCBEA95C6A7358E0AB8A43AC8B180D5C792B51E30613A77C93E8246AA730D0027F25D97A52E91C8120AC14D4F5351E49B5EB0831F8ADE996D68B2A8E2907BDCB28EB491DF016B6FE0ECF23557136EBD499C85988429DD133883ADC818EF42A6611
90FCAC8923095983E7437BAF45EB769F78CBE45578AACCB25456AFA50F27B744EAA143F4D9F6709B26A4D959BCF36803A8B2EA34412E36A4AF41CF4176BE6E672F6F1E83B9CB15DE22283E3409271CDBCBC0179F1974728A7CA1D95615D660C38B20F317B72EE347308088240440C4F47C35019B9B622CB6E7DDAB4B5A68925C25D7CEC8051046350673376F77065259B940BE8402AD648E6517EC988F584926E55B0629D551BFC441D4ACD2EFE8F9F7ED373F79275BA203BB3FA568E31187032C44E72A60451070445E0723E123263D5EB24115F9A34354C5FD168164CFF984F89B8E12111A1A52CD44895C6C9F9ED3D6930624EA743CCB5D054617EBB9977036CA4CA02247EC0B999BF386D619EE2FB2E0E3A3D7AD04C8E297D23440ED030B82692269108E8B3D8D3664B65E74B028CF3A9CFFBFE1905C8CC524996689243754D4B447D4D967C24EF15E71F6C6CF5AFD44189086362B208AFC04E7C590E84BC59757563F479300172910CC5BEB55CABE77A7B36351D8D78D0F5A1B1473A7165C1D1CCCFE4F9D1A3C7497C1D20FEA27FA094CD6D93C075DD74BCD08388119CD4A27B4F8B2C1E48BB78B9D0C5C053298AC0E58758696D7692637AD7A7A3EA801407DA6BF8D1CF6CADFAFA46F73CC8D8F72BF5A1E3550CE61551FD0D2F8CFCFB40236DEAA6037763E16D859417D4214BBD8163EEAAFA4FCBB7719D9E97898946E7B9C3EF2B67631C3A0EA5B2FB99B8CC412F8738EBEFB6B4232730B4F1CC12C3208D174B29F2E58C40C3565A43D2AB4CAFC9A86DF8A952D4E6B7D0A13672A9CDDBDA194009CF9494741A265794188BDF8BF0B4DB5103140713EC3B5C0531695DC7340038571314E9E8A6DB2F82B7FD2590B8C0F040B9FE5B8962C5D814D41C4CCB6BBC7276C332769DD2B5C4001D6A38D4F827D9F49CFE5161A00A80E9625072CCF82D725AE3B89FBE7ECA766E62BEABDD652BFEBAD0763A321EC5FF9C192494A178DDE2E65E3EC2CC53B5DD8DDE08100D1E4F7B5F88331750A351150DA501EC3E26B01BF0F64B21506BC82CD140FACDCFDC487440BA92DAAFA7A05713ADD7648E809DFF47565A058D13A84488F22587A57EEF95222C3BC81E4672D782D7B3BC29BAA7CC3FB5C161DD4F4E7E86AE7CFA9BD819C4B6A9435A065269764E5B7DE22C89292FC211818071CB12000ED336A1F3A457B2955B9B50CAC08091E9101363DC567E907E9795A1D5AA7CD5C73C6EF840550C2AC533EC40CC5F95CE59572B3F075FBE30C4DB5100FF206CA27191BDA7B2C6A9948C16058BC8DE674785B59DF87AECAEE97335451157A9588DD6EFDF98CA1FC6DA7043D11FBF34AC383D8EAC71423B1FC5CB5A3DFF00E197CF09B37FAE6D0F300206A3FE93CF2C5130E4410053D413A8369E01D0F5D485152AE1EC428AADA4962056235961296987CFA5B43C6E5
A491AAE1570B05AA6A7B082A5B8E6DF37057F01A8E8B989F74DF5ABE96FB47C7820756DE5E13E7149FAE62894506487A85C866DF43727AE105FEF0C2E55842082C7CABD60DA8C7A761402C072E853210B747CEE56F0B57EE3476CF1BEC9BAA26C1DC46434795F1F78D08D5540CB218B400BB61268319D4037F15F8198A4E8E5C082AF2A3CF368B7CDCFB25A3E1944A810186671D0A3F76DFD11B00CDAA3B8CE9E986E06116BB6D288CA0EF9DBC5AF6B64D8F35421EEF5A5E5C14CD3B9836EAEFB9A1ED2BF18DDC1EA6E5F44226D0393F654E2837043D6D9825B3DE669BF83E407F82A09B4893329FBE666FC0156BE6FA1E117E2259BBEAF0120CDB757FAE4B432418FB8977AF26F835D50E1A4AED2CAB000C13D7368410FF5F1C5641433C0ACFA00596102E2321802AE9E7324EE7B135A537E736A08DC8B1715C0ED944B51E6BE53411069B17363914B1B8972CDAF2DDD70D0050571C5284E9789B3B64273DFB8E2E1F02BD3A8C0F50397B0B1787E890504478CB47B2DEC83C591BCF36171B7B820A46BA54DC7EE342633A84555A40BA3C84580B1C88195F65A1488FA9DBC5A034A7E0A2AE182127DB856EE6BAF24247EA53EC1D529CB52F78202095E307D6C384F7A17FE6B33C33FF39FE5B9A962E0C4DE91467EB728D2D0BDFCCA64FE3D32D67EA4248CA46F9B46BF2D3BCBB88DAF958A9CF0ECF921D1D3AA3523329ED555C1511E06D6B95A243B63581BCCB8AFCCD7A5A8F315DA6A28C87E410A1C9B4C610F38E2BBC75908857B221213D9B8D72866BC629F7EF1D42FBBB19E74B45651641ED9AFE4CFB141A063A6901C8CE2B3D3733062FB9FF564877C78ADCDC8AE5308735E8B39093DBA36263D868A74B4BD066852B4F80308E1DDCB98E66444F570336180F442E4D31EF29A056A9DD85700E70B95C0D51B4422B0B2D72A081D222D14795FD8F8C30C6CC6886F869DF41AE07AA43342198971155C7BB86ACA587C08CF8B501BD1F970BB540B5AFEF606F40701E74A57CC1874BE645022D919B1328BE8F510A92BDDFE8B8119AE5EB1012183C2EE7F8CC7E44527E72C8274232240ADFC4A84987002024F5ED0723B173DEA8D5681B33A284B8739F23C31782AD1053D8A050BE327A0E3A85F8D033D836CC969127E57AA42F14B288AECCF70847B4FFBA67161D4534C3AE45DDEB0AF9D85060175311A88674BE462E3E788DF1C1CF0C8CA808B2044B5C63ED5A8E4D08EACFB96332559F5D9CFA76EDA4C63131AF7E5A055CA19AB495265358199707529C9E94D8D2AF8A78DDA3214C60BECDEFC3640C3B47FC1365D40146EB0231C677D6B4A63278AB64197BCD116A8683A40D23F97A1566256120A64C0A1CEDFD17F5323044B7B9F20D04CCA96F5AE9B72A478ECA5832A444681E72D4598A98952885B7B933CBB28EDBFBE5F535A47BD0572BA00B6613B9
D64F6891FA48937401316BAA5E99CEF952B3840A529AD6A59DF261469AF96D1FD4670E850EBC7BE52CFAE65079E4448AE149CC000BF86F48798A59E5438B3E40662F6BC3B4EC2106C60015651EFA0485A359E686DA776AA71B52304DD67679E9B8F5FA3C5B7696AC4390025F533E96343138431F718B70D5DBCD1F2CB822EB1C6250DD11B72346EB5D3DDC9B26E79C09E966AF8B52C655CE45B29E9BAE276DD109BF61CACFA257390664374FEC56664355F0AB808FA8513BDB2A917EA6873B15F7235EF7860899A8685C02B45D2071ADFCE75E149140BA915CC7E5CC93EAE38071F4B495C8B934829CD31901DBE113D26100ED0993A0F34BFF6679A493C7248A40B43A480955ADF516401D8949952D23E846B8DA047799596D3A290542B14B051874CE16E396D4E210D7AE4FD1A21978235D863D0DD070573F797881A5A8B740DA6AEE6067B988D342BEC8615F3A2DAD2927EF27DAC9C9589E6FC458E2C8E299C79F72323A68F5800E0B569180B3FE78B74C4405E3EDD8895CBDD1C3EC4B439032FB3AD20756E633D3DBD03631B36D51E7FC1C863B658CB0DE428B16D9A07F2493041F34774E639875F0972597A2F06D1883FD60583E8C1F4500B6CE386F38B9DB6FEBF0616AF13620991326BECB436DDD814EE150A6BF8261EFCBB6B8F5EA858D365BC1E4CDB399D3EC93EEF50033ABD6C6422C79C0E7186FE06F363682BA05D42FE48EEC888665F5AD9C7E8E595686AFDB703F1975215E1A0F7A881FF4562819406E7D8C3710DA3C80954B8A7E74F513D287767FAA21C635D72ED47728E49BB691A5C0C9A97058371630369FD8D177454E7FB88DBFB2A6B26E2B53FE5A8E28795965ADAFF9EF5667A08276C12102980A501BDC4D42D97317357A6CAE5336E7D65CA6C8A8E154F2354B3AE5F10E1769B2133666A28E48970916D908A3FE12732BFF58570A4FE42445312845C662E90858F6638F31C80656B837423BE8CFF52B2D5F618FF7944A87D6BB99249B4CC506808DDEC2041363D6E390FA9403E903AB494E5A1690AB198991938DF72A0CE88C90D5EE85E77E4DE2849F0D700A050519C91F3B6B49B61A790C87D6FBB4F5D76AB62BDDC285B4A8B2DF64479F4FDC05B8784E9865D81CF67056286C7800804BC9C7FE1B70290CD17371821CE01FB25D3DC33A74B61CCBA8319B31C310585D74B8FB57AFDE1F57034AAC95E8D9231B8D8DAF9CF1E0B91330E41501ABA20E68FFAFDB493C74FBA6203AE08DB76200B47DB221282604793AE4A4E0286C26C116CB6B308522A6CA54C714C6CB9899D8DA0A570E5AAE62E76219B753F29AB576C85D000B10F5B1C19CB0F06C9F6302B1A085B6CFC8DF097A819B6F861923B29B7ACB6ED81E85BCE8292722B213E7056C3636E62248188B4F9D844FA75F3BC0FD6E72B46C273986B01B26EBE63468675F97FA9C
FDDBC668070E23FD3C63B45115CA1DD4E1554A003E1AA7FCBF507E620A46E58D79D4EC05941F4E0E509083301FFC89422402B258FE059C90215653A213D4E046F47DB0C2257BE59941D4EA838DBBC0F140AD60DA2A5CCCE2D10FAB45ED0FD54CABA5A305B8494B0A75697373F97D25BC52D4D62A36BAE50F25851AAAAF87C1226CA61B2FEE19AB2888774CF7F945D0858449045E2E4578D549D30B29827254CCC5825EB1D9973C0C933DCD37A2CD16A692D05AE4C21FEEC48D7B45F3A3100CB1BA479BF68852DEAE193F05AEB1CF0190207433FE4089B666C82A1E464639554738E24BF92B0F212F5D45F27748E0F9CA3E398B52087D20CAC3AF7A952714AD53648A3BDB53D756195EF13EEC6B5D16AA535B43CF102BAA507112CA2DBE9BAB141A96030F64F86557C57DFFBD3D461F919A274384D7A74403BBC2801C063693D8A96B204B47E82AD2545DEE345B621ADD477D842CCEA7236637D1BD3419552C885D5E8D7FB8F9DE09295F9CEA11BE8A9BE0B3A9E1867A4124B97723CBF0A45A2DA4A0E821231D115902FC2C5183CC1CF92426B9F57FFD0DAF449FCB9478AA8CF4A0A6FBCB0A65B2346BF4A98CA98B6336C078
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 650 233 rc
-84 267 m
722 267 l
722 -269 l
-84 -269 l
h
-84 267 m
f
88.913383 125.26772 m
139.93701 125.26772 l
139.93701 96.921265 l
88.913383 96.921265 l
h
88.913383 125.26772 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -84 267 cm
172.91339 141.73228 m
223.93701 141.73228 l
223.93701 170.07874 l
172.91339 170.07874 l
h
172.91339 141.73228 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 114.42519 111.09449 cm
/F1.1[ 16 0 0 -16 0 0]sf
-13.04 5.776001 m
(!"#$)[ 8.896000 4.144000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
88.913383 40.228348 m
139.93701 40.228348 l
139.93701 11.881891 l
88.913383 11.881891 l
h
88.913383 40.228348 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -84 267 cm
172.91339 226.77165 m
223.93701 226.77165 l
223.93701 255.1181 l
172.91339 255.1181 l
h
172.91339 226.77165 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 114.42519 26.055119 cm
-14.368 5.776001 m
(%"#$)[ 11.552000 4.144000 8.896000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -84 267 cm
124.72441 198.4252 m
124.72441 198.4252 l
143.17087 198.4252 l
S
0 i
CM
67.170868 68.574806 m
59.170864 71.574806 l
59.170864 65.574806 l
h
67.170868 68.574806 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
151.17087 198.4252 m
143.17087 195.4252 l
143.17087 201.4252 l
h
151.17087 198.4252 m
S
1 J
1 j
0.60000002 i
153.07086 155.90552 m
155.90552 155.90552 l
163.01338 155.90552 l
S
0 i
CM
87.013382 111.09449 m
79.013382 114.09449 l
79.013382 108.09449 l
h
87.013382 111.09449 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
171.01338 155.90552 m
163.01338 152.90552 l
163.01338 158.90552 l
h
171.01338 155.90552 m
S
1 J
1 j
0.60000002 i
153.07086 240.94489 m
153.07086 240.94489 l
163.01338 240.94489 l
S
0 i
CM
87.013382 26.055119 m
79.013382 29.055119 l
79.013382 23.055119 l
h
87.013382 26.055119 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
171.01338 240.94489 m
163.01338 237.94489 l
163.01338 243.94489 l
h
171.01338 240.94489 m
S
1 J
1 j
0.60000002 i
153.07086 240.94489 m
153.07086 192.75591 l
153.07086 155.90552 l
S
226.90663 155.90552 m
223.93701 155.90552 l
235.36433 155.90552 l
S
0 i
CM
159.36433 111.09449 m
151.36433 114.09449 l
151.36433 108.09449 l
h
159.36433 111.09449 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
243.36433 155.90552 m
235.36433 152.90552 l
235.36433 158.90552 l
h
243.36433 155.90552 m
S
1 1 1 sc
CM
186.61169 121.11646 m
192.41028 115.58147 192.41028 106.6075 186.61169 101.07252 c
180.81314 95.537498 171.41183 95.537498 165.61327 101.07252 c
159.81468 106.6075 159.81468 115.58147 165.61327 121.11646 c
171.41183 126.65148 180.81314 126.65148 186.61169 121.11646 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -84 267 cm
270.61169 145.88353 m
276.41028 151.41852 276.41028 160.3925 270.61169 165.92749 c
264.81314 171.46249 255.41183 171.46249 249.61327 165.92749 c
243.81468 160.3925 243.81468 151.41852 249.61327 145.88353 c
255.41183 140.34853 264.81314 140.34853 270.61169 145.88353 c
S
1.5 w
257.95276 144.56693 m
257.95276 155.8441 l
S
0 i
CM
173.95276 102.3559 m
177.25276 111.15591 l
170.65276 111.15591 l
h
173.95276 102.3559 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
257.95276 164.64409 m
261.25275 155.8441 l
254.65276 155.8441 l
h
257.95276 164.64409 m
S
1 w
1 J
1 j
0.60000002 i
226.90663 240.94489 m
223.93701 240.94489 l
235.36433 240.94489 l
S
0 i
CM
159.36433 26.055119 m
151.36433 29.055119 l
151.36433 23.055119 l
h
159.36433 26.055119 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
243.36433 240.94489 m
235.36433 237.94489 l
235.36433 243.94489 l
h
243.36433 240.94489 m
S
1 1 1 sc
CM
186.61169 36.077095 m
192.41028 30.542109 192.41028 21.56813 186.61169 16.033144 c
180.81314 10.498131 171.41183 10.498131 165.61327 16.033144 c
159.81468 21.56813 159.81468 30.542109 165.61327 36.077095 c
171.41183 41.61211 180.81314 41.61211 186.61169 36.077095 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -84 267 cm
270.61169 230.92291 m
276.41028 236.45789 276.41028 245.43187 270.61169 250.96686 c
264.81314 256.50186 255.41183 256.50186 249.61327 250.96686 c
243.81468 245.43187 243.81468 236.45789 249.61327 230.92291 c
255.41183 225.38789 264.81314 225.38789 270.61169 230.92291 c
S
0 i
1 1 1 sc
CM
239.1496 167.7874 m
290.17322 167.7874 l
290.17322 139.44095 l
239.1496 139.44095 l
h
239.1496 167.7874 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -84 267 cm
323.1496 99.212601 m
374.17322 99.212601 l
374.17322 127.55905 l
323.1496 127.55905 l
h
323.1496 99.212601 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 264.66141 153.61417 cm
-13.04 5.776001 m
(!"#$)[ 8.896000 4.144000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
239.1496 82.748032 m
290.17322 82.748032 l
290.17322 54.401577 l
239.1496 54.401577 l
h
239.1496 82.748032 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -84 267 cm
323.1496 184.25197 m
374.17322 184.25197 l
374.17322 212.59842 l
323.1496 212.59842 l
h
323.1496 184.25197 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 264.66141 68.574806 cm
-14.368 5.776001 m
(%"#$)[ 11.552000 4.144000 8.896000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -84 267 cm
274.96063 155.90552 m
274.96063 155.90552 l
293.40707 155.90552 l
S
0 i
CM
217.40709 111.09449 m
209.40709 114.09449 l
209.40709 108.09449 l
h
217.40709 111.09449 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
301.40707 155.90552 m
293.40707 152.90552 l
293.40707 158.90552 l
h
301.40707 155.90552 m
S
1 J
1 j
0.60000002 i
303.3071 113.38583 m
306.14172 113.38583 l
313.2496 113.38583 l
S
0 i
CM
237.2496 153.61418 m
229.2496 156.61418 l
229.2496 150.61418 l
h
237.2496 153.61418 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
321.2496 113.38583 m
313.2496 110.38583 l
313.2496 116.38583 l
h
321.2496 113.38583 m
S
1 J
1 j
0.60000002 i
303.3071 198.4252 m
303.3071 198.4252 l
313.2496 198.4252 l
S
0 i
CM
237.2496 68.574806 m
229.2496 71.574806 l
229.2496 65.574806 l
h
237.2496 68.574806 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
321.2496 198.4252 m
313.2496 195.4252 l
313.2496 201.4252 l
h
321.2496 198.4252 m
S
1 J
1 j
0.60000002 i
303.3071 198.4252 m
303.3071 150.23622 l
303.3071 113.38583 l
S
377.14285 113.38583 m
374.17322 113.38583 l
385.60056 113.38583 l
S
0 i
CM
309.60056 153.61418 m
301.60056 156.61418 l
301.60056 150.61418 l
h
309.60056 153.61418 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
393.60056 113.38583 m
385.60056 110.38583 l
385.60056 116.38583 l
h
393.60056 113.38583 m
S
1 1 1 sc
CM
336.84793 163.63615 m
342.64651 158.10117 342.64651 149.12718 336.84793 143.59219 c
331.04935 138.05719 321.64804 138.05719 315.84949 143.59219 c
310.0509 149.12718 310.0509 158.10117 315.84949 163.63615 c
321.64804 169.17116 331.04935 169.17116 336.84793 163.63615 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -84 267 cm
420.84793 103.36385 m
426.64651 108.89883 426.64651 117.87282 420.84793 123.4078 c
415.04935 128.94281 405.64804 128.94281 399.84949 123.4078 c
394.0509 117.87282 394.0509 108.89883 399.84949 103.36385 c
405.64804 97.828835 415.04935 97.828835 420.84793 103.36385 c
S
377.14285 198.4252 m
374.17322 198.4252 l
385.60056 198.4252 l
S
0 i
CM
309.60056 68.574806 m
301.60056 71.574806 l
301.60056 65.574806 l
h
309.60056 68.574806 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
393.60056 198.4252 m
385.60056 195.4252 l
385.60056 201.4252 l
h
393.60056 198.4252 m
S
1 1 1 sc
CM
336.84793 78.596779 m
342.64651 73.06179 342.64651 64.087814 336.84793 58.55283 c
331.04935 53.017815 321.64804 53.017815 315.84949 58.55283 c
310.0509 64.087814 310.0509 73.06179 315.84949 78.596779 c
321.64804 84.13179 331.04935 84.13179 336.84793 78.596779 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -84 267 cm
420.84793 188.40321 m
426.64651 193.9382 426.64651 202.91219 420.84793 208.44717 c
415.04935 213.98218 405.64804 213.98218 399.84949 208.44717 c
394.0509 202.91219 394.0509 193.9382 399.84949 188.40321 c
405.64804 182.86821 415.04935 182.86821 420.84793 188.40321 c
S
0 i
1 1 1 sc
CM
389.38583 213.14174 m
440.40945 213.14174 l
440.40945 184.79527 l
389.38583 184.79527 l
h
389.38583 213.14174 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -84 267 cm
473.38583 53.858269 m
524.40942 53.858269 l
524.40942 82.204727 l
473.38583 82.204727 l
h
473.38583 53.858269 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 414.89764 198.96851 cm
-13.04 5.776001 m
(!"#$)[ 8.896000 4.144000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
389.38583 128.10236 m
440.40945 128.10236 l
440.40945 99.755905 l
389.38583 99.755905 l
h
389.38583 128.10236 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -84 267 cm
473.38583 138.89764 m
524.40942 138.89764 l
524.40942 167.24409 l
473.38583 167.24409 l
h
473.38583 138.89764 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 414.89764 113.92914 cm
-14.368 5.776001 m
(%"#$)[ 11.552000 4.144000 8.896000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -84 267 cm
425.19684 110.55118 m
425.19684 110.55118 l
443.64331 110.55118 l
S
0 i
CM
367.64331 156.44882 m
359.64331 159.44882 l
359.64331 153.44882 l
h
367.64331 156.44882 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
451.64331 110.55118 m
443.64331 107.55118 l
443.64331 113.55118 l
h
451.64331 110.55118 m
S
1 J
1 j
0.60000002 i
453.5433 68.031494 m
456.37796 68.031494 l
463.48581 68.031494 l
S
0 i
CM
387.48581 198.96851 m
379.48581 201.96851 l
379.48581 195.96851 l
h
387.48581 198.96851 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
471.48581 68.031494 m
463.48581 65.031494 l
463.48581 71.031494 l
h
471.48581 68.031494 m
S
1 J
1 j
0.60000002 i
453.5433 153.07086 m
453.5433 153.07086 l
463.48581 153.07086 l
S
0 i
CM
387.48581 113.92914 m
379.48581 116.92914 l
379.48581 110.92914 l
h
387.48581 113.92914 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
471.48581 153.07086 m
463.48581 150.07086 l
463.48581 156.07086 l
h
471.48581 153.07086 m
S
1 J
1 j
0.60000002 i
453.5433 153.07086 m
453.5433 104.88189 l
453.5433 68.031494 l
S
527.37909 68.031494 m
524.40942 68.031494 l
535.83679 68.031494 l
S
0 i
CM
459.83676 198.96851 m
451.83676 201.96851 l
451.83676 195.96851 l
h
459.83676 198.96851 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
543.83679 68.031494 m
535.83679 65.031494 l
535.83679 71.031494 l
h
543.83679 68.031494 m
S
1 1 1 sc
CM
487.08414 208.99048 m
492.88272 203.45549 492.88272 194.48152 487.08414 188.94653 c
481.28558 183.41151 471.88428 183.41151 466.08572 188.94653 c
460.28714 194.48152 460.28714 203.45549 466.08572 208.99048 c
471.88428 214.5255 481.28558 214.5255 487.08414 208.99048 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -84 267 cm
571.08411 58.009521 m
576.88275 63.544506 576.88275 72.518486 571.08411 78.053467 c
565.28558 83.588486 555.88428 83.588486 550.08569 78.053467 c
544.28711 72.518486 544.28711 63.544506 550.08569 58.009521 c
555.88428 52.474506 565.28558 52.474506 571.08411 58.009521 c
S
527.37909 153.07086 m
524.40942 153.07086 l
535.83679 153.07086 l
S
0 i
CM
459.83676 113.92914 m
451.83676 116.92914 l
451.83676 110.92914 l
h
459.83676 113.92914 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
543.83679 153.07086 m
535.83679 150.07086 l
535.83679 156.07086 l
h
543.83679 153.07086 m
S
1 1 1 sc
CM
487.08414 123.95111 m
492.88272 118.41612 492.88272 109.44215 487.08414 103.90716 c
481.28558 98.372147 471.88428 98.372147 466.08572 103.90716 c
460.28714 109.44215 460.28714 118.41612 466.08572 123.95111 c
471.88428 129.48613 481.28558 129.48613 487.08414 123.95111 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -84 267 cm
571.08411 143.04889 m
576.88275 148.58388 576.88275 157.55786 571.08411 163.09283 c
565.28558 168.62785 555.88428 168.62785 550.08569 163.09283 c
544.28711 157.55786 544.28711 148.58388 550.08569 143.04889 c
555.88428 137.51387 565.28558 137.51387 571.08411 143.04889 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 182.87794 111.92126 cm
-3.0826771 5.776001 m
(&)s
1.5 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -84 267 cm
257.95276 229.60629 m
257.95276 240.88347 l
S
0 i
CM
173.95276 17.316536 m
177.25276 26.116537 l
170.65276 26.116537 l
h
173.95276 17.316536 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
257.95276 249.68346 m
261.25275 240.88347 l
254.65276 240.88347 l
h
257.95276 249.68346 m
S
/Cs2 SC
0 sc
1 0 0 -1 182.87794 26.881891 cm
-3.0826771 5.776001 m
(&)s
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -84 267 cm
408.18896 102.04724 m
408.18896 113.32441 l
S
0 i
CM
324.18896 144.8756 m
327.48898 153.6756 l
320.88898 153.6756 l
h
324.18896 144.8756 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
408.18896 122.12441 m
411.48898 113.32441 l
404.88898 113.32441 l
h
408.18896 122.12441 m
S
/Cs2 SC
0 sc
1 0 0 -1 333.11417 154.44095 cm
-3.0826771 5.776001 m
(&)s
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -84 267 cm
408.18896 185.90552 m
408.18896 197.18268 l
S
0 i
CM
324.18896 61.017323 m
327.48898 69.817322 l
320.88898 69.817322 l
h
324.18896 61.017323 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
408.18896 205.98268 m
411.48898 197.18268 l
404.88898 197.18268 l
h
408.18896 205.98268 m
S
/Cs2 SC
0 sc
1 0 0 -1 333.11417 70.58268 cm
-3.0826771 5.776001 m
(&)s
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -84 267 cm
558.42517 55.51181 m
558.42517 66.788979 l
S
0 i
CM
474.4252 191.41103 m
477.72519 200.21103 l
471.12518 200.21103 l
h
474.4252 191.41103 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
558.42517 75.588974 m
561.72522 66.788979 l
555.12518 66.788979 l
h
558.42517 75.588974 m
S
/Cs2 SC
0 sc
1 0 0 -1 483.3504 200.97638 cm
-3.0826771 5.776001 m
(&)s
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -84 267 cm
558.42517 140.55118 m
558.42517 151.82834 l
S
0 i
CM
474.4252 106.37165 m
477.72519 115.17165 l
471.12518 115.17165 l
h
474.4252 106.37165 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
558.42517 160.62834 m
561.72522 151.82834 l
555.12518 151.82834 l
h
558.42517 160.62834 m
S
/Cs2 SC
0 sc
1 0 0 -1 483.3504 115.93701 cm
-3.0826771 5.776001 m
(&)s
1 0 0 -1 27.8937 70.58268 cm
-13.48 5.776001 m
('"#$)[ 9.776000 4.144000 8.896000 0.000000 ] xS
1 0 0 -1 578.94489 199.79134 cm
-52.16 -3.447998 m
(\(\)\)*+,-./0-+#11)[ 10.368000 9.488000 9.488000 5.040000 9.184000 8.288000 3.552000 13.648000 8.592000 5.040000 3.552000 9.184000 8.896000 4.448000 0.000000 ] xS
-42.391998 15 m
(2+345-3#06)[ 11.552000 9.184000 8.592000 12.784000 8.592000 3.552000 8.592000 8.896000 5.040000 0.000000 ] xS
1 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -84 267 cm
578.2677 68.031494 m
578.2677 68.031494 l
596.71417 68.031494 l
S
0 i
CM
520.71417 198.96851 m
512.71417 201.96851 l
512.71417 195.96851 l
h
520.71417 198.96851 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
604.71417 68.031494 m
596.71417 65.031494 l
596.71417 71.031494 l
h
604.71417 68.031494 m
S
1 J
1 j
0.60000002 i
575.43304 153.07086 m
575.43304 153.07086 l
593.87952 153.07086 l
S
0 i
CM
517.87952 113.92914 m
509.87952 116.92914 l
509.87952 110.92914 l
h
517.87952 113.92914 m
f
0 J
0 j
1 0 0 -1 -84 267 cm
601.87952 153.07086 m
593.87952 150.07086 l
593.87952 156.07086 l
h
601.87952 153.07086 m
S
/Cs2 SC
0 sc
1 0 0 -1 562.46851 107.43701 cm
-20.296 -3.447998 m
(730/-81)[ 11.264000 8.592000 5.040000 8.592000 3.552000 3.552000 0.000000 ] xS
-42.391998 15 m
(2+345-3#06)[ 11.552000 9.184000 8.592000 12.784000 8.592000 3.552000 8.592000 8.896000 5.040000 0.000000 ] xS
1 0 0 -1 432.0748 81.921265 cm
-25.488001 5.776001 m
(!39381&)[ 8.896000 8.592000 8.000000 8.592000 3.552000 4.448000 0.000000 ] xS
1 0 0 -1 274.81946 38.220474 cm
-25.488001 5.776001 m
(!39381:)[ 8.896000 8.592000 8.000000 8.592000 3.552000 4.448000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
